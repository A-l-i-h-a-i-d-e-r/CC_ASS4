%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "ast.h"  // Include AST definitions

// Forward declarations
extern int yylex(void);
void yyerror(const char *msg);

// Global variables
ast_node *root = NULL;           // Root of the AST
int print_ast_flag = 0;          // Flag for --print-ast option

// Function to create AST nodes
ast_node* create_node(enum node_type type) {
    ast_node *node = malloc(sizeof(ast_node));
    if (!node) {
        yyerror("Memory allocation failed");
        exit(1);
    }
    node->type = type;
    return node;
}

// Function to create object pair nodes
ast_node* create_pair(char *key, ast_node *value) {
    ast_node *pair = create_node(NODE_OBJECT);
    pair->data.object.key = key;
    pair->data.object.value = value;
    pair->data.object.next = NULL;
    return pair;
}

// Function to append to object or array
void append_node(ast_node *list, ast_node *new_node) {
    if (!list) return;
    while (list->data.object.next) {
        list = list->data.object.next;
    }
    list->data.object.next = new_node;
}

// Function to print AST with indentation
void print_ast(ast_node *node, int depth) {
    if (!node) return;
    for (int i = 0; i < depth; i++) printf("  ");
    switch (node->type) {
        case NODE_OBJECT:
            printf("Object:\n");
            while (node) {
                for (int i = 0; i < depth + 1; i++) printf("  ");
                printf("%s: ", node->data.object.key);
                print_ast(node->data.object.value, depth + 2);
                node = node->data.object.next;
            }
            break;
        case NODE_ARRAY:
            printf("Array:\n");
            while (node) {
                print_ast(node->data.array.element, depth + 1);
                node = node->data.array.next;
            }
            break;
        case NODE_STRING:
            printf("String: \"%s\"\n", node->data.string);
            break;
        case NODE_NUMBER:
            printf("Number: %s\n", node->data.number);
            break;
        case NODE_TRUE:
            printf("True\n");
            break;
        case NODE_FALSE:
            printf("False\n");
            break;
        case NODE_NULL:
            printf("Null\n");
            break;
    }
}

// Function to free AST memory
void free_ast(ast_node *node) {
    if (!node) return;
    switch (node->type) {
        case NODE_OBJECT:
            while (node) {
                ast_node *next = node->data.object.next;
                free(node->data.object.key);
                free_ast(node->data.object.value);
                free(node);
                node = next;
            }
            break;
        case NODE_ARRAY:
            while (node) {
                ast_node *next = node->data.array.next;
                free_ast(node->data.array.element);
                free(node);
                node = next;
            }
            break;
        case NODE_STRING:
            free(node->data.string);
            free(node);
            break;
        case NODE_NUMBER:
            free(node->data.number);
            free(node);
            break;
        case NODE_TRUE:
        case NODE_FALSE:
        case NODE_NULL:
            free(node);
            break;
    }
}

%}

%locations
%define parse.error verbose

%union {
    char *str;
    ast_node *node;
}

%token LBRACE RBRACE LBRACK RBRACK COLON COMMA
%token <str> STRING NUMBER
%token TRUE FALSE T_NULL
%token YYerror

%type <node> json value object array elements members member

%start json

%%

json: value { root = $1; }
    ;

value: object
     | array
     | STRING { $$ = create_node(NODE_STRING); $$->data.string = $1; }
     | NUMBER { $$ = create_node(NODE_NUMBER); $$->data.number = $1; }
     | TRUE   { $$ = create_node(NODE_TRUE); }
     | FALSE  { $$ = create_node(NODE_FALSE); }
     | T_NULL { $$ = create_node(NODE_NULL); }
     ;

object: LBRACE RBRACE { $$ = NULL; }  // Empty object
      | LBRACE members RBRACE { $$ = $2; }
      ;

members: member { $$ = $1; }
       | members COMMA member { append_node($1, $3); $$ = $1; }
       ;

member: STRING COLON value { $$ = create_pair($1, $3); }
      ;

array: LBRACK RBRACK { $$ = NULL; }  // Empty array
     | LBRACK elements RBRACK { $$ = $2; }
     ;

elements: value { $$ = $1; $$->data.array.next = NULL; }
        | elements COMMA value { append_node($1, $3); $$ = $1; }
        ;

%%

int main(int argc, char *argv[]) {
    // Check for --print-ast flag
    if (argc > 1 && strcmp(argv[1], "--print-ast") == 0) {
        print_ast_flag = 1;
    }

    // Parse the input
    if (yyparse() == 0) {
        printf("Parsing successful\n");
        if (print_ast_flag && root) {
            printf("AST:\n");
            print_ast(root, 0);
        }
    } else {
        printf("Parsing failed\n");
    }

    // Clean up
    free_ast(root);
    return 0;
}

void yyerror(const char *msg) {
    fprintf(stderr, "Error: %s at line %d, column %d\n",
            msg, yylloc.first_line, yylloc.first_column);
}



////////////////////////////////////////////////////////////
%{
    #include <stdio.h>
    #include <stdlib.h>
    #include <string.h>
    #include <dirent.h>
    #include "ast.h"
    
    // Function declarations
    int yylex(void);  // Explicitly declare yylex
    void yyerror(const char *msg);
    
    // Structure definitions
    typedef struct table_schema {
        char *name;
        char *shape;
        char **columns;
        int num_columns;
        int next_id;
        FILE *fp;
    } TableSchema;
    
    typedef struct table_list {
        TableSchema *schema;
        struct table_list *next;
    } TableList;
    
    // Global variables
    ast_node *root = NULL;
    int print_ast_flag = 0;
    char *output_dir = ".";
    TableList *tables = NULL;
    int table_count = 0;
    
    // Function prototypes
    ast_node* create_node(enum node_type type);
    ast_node* create_pair(char *key, ast_node *value);
    void append_node(ast_node *list, ast_node *new_node);
    void print_ast(ast_node *node, int depth);
    void free_ast(ast_node *node);
    void process_ast(ast_node *root, char *output_dir);
    TableSchema* find_or_create_table(char **scalar_keys, int num_scalar, char **object_keys, int num_object, char *output_dir);
    int process_object(ast_node *node, TableSchema *parent_schema, int parent_id, char *key, char *output_dir);
    void process_array(ast_node *node, TableSchema *parent_schema, int parent_id, char *key, char *output_dir);
    void write_csv_row(FILE *fp, char **values, int num_values);
    int strcmp_func(const void *a, const void *b);
    %}
    
    
    %locations
    %define parse.error verbose
    
    %union {
        char *str;
        ast_node *node;
    }
    
    %token LBRACE RBRACE LBRACK RBRACK COLON COMMA
    %token <str> STRING NUMBER
    %token TRUE FALSE T_NULL
    %token YYerror
    
    %type <node> json value object array elements members member
    
    %start json
    
    %%
    
    json: value { root = $1; }
        ;
    
    value: object
         | array
         | STRING { $$ = create_node(NODE_STRING); $$->data.string = $1; }
         | NUMBER { $$ = create_node(NODE_NUMBER); $$->data.number = $1; }
         | TRUE   { $$ = create_node(NODE_TRUE); }
         | FALSE  { $$ = create_node(NODE_FALSE); }
         | T_NULL { $$ = create_node(NODE_NULL); }
         ;
    
    object: LBRACE RBRACE { $$ = NULL; }
          | LBRACE members RBRACE { $$ = $2; }
          ;
    
    members: member { $$ = $1; }
           | members COMMA member { append_node($1, $3); $$ = $1; }
           ;
    
    member: STRING COLON value { $$ = create_pair($1, $3); }
          ;
    
    array: LBRACK RBRACK { $$ = NULL; }
         | LBRACK elements RBRACK { $$ = $2; }
         ;
    
    elements: value { $$ = $1; $$->data.array.next = NULL; }
            | elements COMMA value { append_node($1, $3); $$ = $1; }
            ;
    
    %%
    
    int main(int argc, char *argv[]) {
        // Parse command-line arguments
        for (int i = 1; i < argc; i++) {
            if (strcmp(argv[i], "--print-ast") == 0) {
                print_ast_flag = 1;
            } else if (strcmp(argv[i], "--out-dir") == 0 && i + 1 < argc) {
                output_dir = argv[i + 1];
                i++;
            }
        }
    
        // Parse the input
        if (yyparse() == 0) {
            if (print_ast_flag && root) {
                printf("AST:\n");
                print_ast(root, 0);
            }
            process_ast(root, output_dir);
        } else {
            exit(1);
        }
    
        // Clean up
        free_ast(root);
        TableList *current = tables;
        while (current) {
            TableList *next = current->next;
            fclose(current->schema->fp);
            for (int i = 0; i < current->schema->num_columns; i++) {
                free(current->schema->columns[i]);
            }
            free(current->schema->columns);
            free(current->schema->name);
            free(current->schema->shape);
            free(current->schema);
            free(current);
            current = next;
        }
        return 0;
    }
    
    void yyerror(const char *msg) {
        fprintf(stderr, "Error: %s at line %d, column %d\n",
                msg, yylloc.first_line, yylloc.first_column);
        exit(1);
    }
    
    ast_node* create_node(enum node_type type) {
        ast_node *node = (ast_node*)malloc(sizeof(ast_node));
        if (!node) {
            yyerror("Memory allocation failed for node");
        }
        node->type = type;
        return node;
    }
    
    ast_node* create_pair(char *key, ast_node *value) {
        ast_node *node = create_node(NODE_OBJECT);
        node->data.object.key = key;
        node->data.object.value = value;
        node->data.object.next = NULL;
        return node;
    }
    
    void append_node(ast_node *list, ast_node *new_node) {
        if (!list) return;
        ast_node *current = list;
        while (current->type == NODE_OBJECT ? current->data.object.next : current->data.array.next) {
            current = current->type == NODE_OBJECT ? current->data.object.next : current->data.array.next;
        }
        if (current->type == NODE_OBJECT) {
            current->data.object.next = new_node;
        } else {
            current->data.array.next = new_node;
        }
    }
    
    void print_ast(ast_node *node, int depth) {
        if (!node) return;
        for (int i = 0; i < depth; i++) printf("  ");
        switch (node->type) {
            case NODE_OBJECT:
                printf("Object:\n");
                for (ast_node *pair = node; pair; pair = pair->data.object.next) {
                    for (int i = 0; i < depth + 1; i++) printf("  ");
                    printf("%s: ", pair->data.object.key);
                    print_ast(pair->data.object.value, depth + 2);
                }
                break;
            case NODE_ARRAY:
                printf("Array:\n");
                for (ast_node *elem = node; elem; elem = elem->data.array.next) {
                    print_ast(elem, depth + 1);
                }
                break;
            case NODE_STRING:
                printf("String: %s\n", node->data.string);
                break;
            case NODE_NUMBER:
                printf("Number: %s\n", node->data.number);
                break;
            case NODE_TRUE:
                printf("True\n");
                break;
            case NODE_FALSE:
                printf("False\n");
                break;
            case NODE_NULL:
                printf("Null\n");
                break;
        }
    }
    
    void free_ast(ast_node *node) {
        if (!node) return;
        switch (node->type) {
            case NODE_OBJECT:
                for (ast_node *pair = node; pair;) {
                    ast_node *next = pair->data.object.next;
                    free(pair->data.object.key);
                    free_ast(pair->data.object.value);
                    free(pair);
                    pair = next;
                }
                break;
            case NODE_ARRAY:
                for (ast_node *elem = node; elem;) {
                    ast_node *next = elem->data.array.next;
                    free_ast(elem);
                    elem = next;
                }
                break;
            case NODE_STRING:
                free(node->data.string);
                free(node);
                break;
            case NODE_NUMBER:
                free(node->data.number);
                free(node);
                break;
            case NODE_TRUE:
            case NODE_FALSE:
            case NODE_NULL:
                free(node);
                break;
        }
    }
    
    void process_ast(ast_node *root, char *output_dir) {
        if (!root) return;
        if (root->type == NODE_OBJECT) {
            process_object(root, NULL, 0, "root", output_dir);
        } else if (root->type == NODE_ARRAY) {
            process_array(root, NULL, 0, "root", output_dir);
        }
    }
    
    int strcmp_func(const void *a, const void *b) {
        return strcmp(*(const char**)a, *(const char**)b);
    }
    
    TableSchema* find_or_create_table(char **scalar_keys, int num_scalar, char **object_keys, int num_object, char *output_dir) {
        // Create shape string
        qsort(scalar_keys, num_scalar, sizeof(char*), strcmp_func);
        qsort(object_keys, num_object, sizeof(char*), strcmp_func);
        char shape[1024] = "scalar:";
        for (int i = 0; i < num_scalar; i++) {
            strcat(shape, scalar_keys[i]);
            if (i < num_scalar - 1) strcat(shape, ",");
        }
        strcat(shape, ";object:");
        for (int i = 0; i < num_object; i++) {
            strcat(shape, object_keys[i]);
            if (i < num_object - 1) strcat(shape, ",");
        }
    
        // Search for existing table
        for (TableList *current = tables; current; current = current->next) {
            if (strcmp(current->schema->shape, shape) == 0) {
                return current->schema;
            }
        }
    
        // Create new table
        char name[32];
        snprintf(name, sizeof(name), "table%d", table_count++);
        TableSchema *table = (TableSchema*)malloc(sizeof(TableSchema));
        table->name = strdup(name);
        table->shape = strdup(shape);
        table->num_columns = 1 + num_scalar + num_object;
        table->columns = (char**)malloc(sizeof(char*) * table->num_columns);
        table->columns[0] = strdup("id");
        for (int i = 0; i < num_scalar; i++) {
            table->columns[1 + i] = strdup(scalar_keys[i]);
        }
        for (int i = 0; i < num_object; i++) {
            char fk_column[64];
            snprintf(fk_column, sizeof(fk_column), "%s_id", object_keys[i]);
            table->columns[1 + num_scalar + i] = strdup(fk_column);
        }
        table->next_id = 1;
    
        // Open CSV file
        char filename[256];
        snprintf(filename, sizeof(filename), "%s/%s.csv", output_dir, table->name);
        table->fp = fopen(filename, "w");
        if (!table->fp) {
            fprintf(stderr, "Error opening file %s\n", filename);
            exit(1);
        }
        write_csv_row(table->fp, table->columns, table->num_columns);
    
        // Add to tables list
        TableList *new_table = (TableList*)malloc(sizeof(TableList));
        new_table->schema = table;
        new_table->next = tables;
        tables = new_table;
        return table;
    }
    
    int process_object(ast_node *node, TableSchema *parent_schema, int parent_id, char *key, char *output_dir) {
        char *scalar_keys[32];
        int num_scalar = 0;
        char *object_keys[32];
        int num_object = 0;
        char *array_keys[32];
        int num_array = 0;
    
        // Collect keys
        for (ast_node *pair = node; pair; pair = pair->data.object.next) {
            ast_node *value = pair->data.object.value;
            if (value->type == NODE_STRING || value->type == NODE_NUMBER ||
                value->type == NODE_TRUE || value->type == NODE_FALSE || value->type == NODE_NULL) {
                scalar_keys[num_scalar++] = pair->data.object.key;
            } else if (value->type == NODE_OBJECT) {
                object_keys[num_object++] = pair->data.object.key;
            } else if (value->type == NODE_ARRAY) {
                array_keys[num_array++] = pair->data.object.key;
            }
        }
    
        // Find or create table
        TableSchema *table = find_or_create_table(scalar_keys, num_scalar, object_keys, num_object, output_dir);
        int id = table->next_id++;
    
        // Prepare row values
        char **values = (char**)malloc(sizeof(char*) * table->num_columns);
        char id_str[16];
        snprintf(id_str, sizeof(id_str), "%d", id);
        values[0] = id_str;
        for (int i = 0; i < num_scalar; i++) {
            for (ast_node *pair = node; pair; pair = pair->data.object.next) {
                if (strcmp(pair->data.object.key, scalar_keys[i]) == 0) {
                    ast_node *value = pair->data.object.value;
                    switch (value->type) {
                        case NODE_STRING: values[1 + i] = value->data.string; break;
                        case NODE_NUMBER: values[1 + i] = value->data.number; break;
                        case NODE_TRUE: values[1 + i] = "true"; break;
                        case NODE_FALSE: values[1 + i] = "false"; break;
                        case NODE_NULL: values[1 + i] = ""; break;
                        default: values[1 + i] = "";
                    }
                    break;
                }
            }
        }
        for (int i = 0; i < num_object; i++) {
            for (ast_node *pair = node; pair; pair = pair->data.object.next) {
                if (strcmp(pair->data.object.key, object_keys[i]) == 0) {
                    int child_id = process_object(pair->data.object.value, table, id, object_keys[i], output_dir);
                    char *fk_value = (char*)malloc(16);
                    snprintf(fk_value, 16, "%d", child_id);
                    values[1 + num_scalar + i] = fk_value;
                    break;
                }
            }
        }
    
        // Write row
        write_csv_row(table->fp, values, table->num_columns);
    
        // Process arrays
        for (int i = 0; i < num_array; i++) {
            for (ast_node *pair = node; pair; pair = pair->data.object.next) {
                if (strcmp(pair->data.object.key, array_keys[i]) == 0) {
                    process_array(pair->data.object.value, table, id, array_keys[i], output_dir);
                    break;
                }
            }
        }
    
        // Clean up
        for (int i = 1 + num_scalar; i < table->num_columns; i++) {
            if (i >= 1 + num_scalar) free(values[i]);
        }
        free(values);
        return id;
    }
    
    void process_array(ast_node *node, TableSchema *parent_schema, int parent_id, char *key, char *output_dir) {
        if (!node) return;
        ast_node *first = node;
        if (first->type != NODE_OBJECT) {
            // Array of scalars
            char table_name[64];
            snprintf(table_name, sizeof(table_name), "%s_%s", parent_schema->name, key);
            char filename[256];
            snprintf(filename, sizeof(filename), "%s/%s.csv", output_dir, table_name);
            FILE *fp = fopen(filename, "w");
            if (!fp) {
                fprintf(stderr, "Error opening file %s\n", filename);
                exit(1);
            }
            char *header[] = {"parent_id", "index", "value"};
            write_csv_row(fp, header, 3);
    
            int index = 0;
            for (ast_node *elem = node; elem; elem = elem->data.array.next) {
                char parent_id_str[16], index_str[16], *value_str;
                snprintf(parent_id_str, sizeof(parent_id_str), "%d", parent_id);
                snprintf(index_str, sizeof(index_str), "%d", index++);
                switch (elem->type) {
                    case NODE_STRING: value_str = elem->data.string; break;
                    case NODE_NUMBER: value_str = elem->data.number; break;
                    case NODE_TRUE: value_str = "true"; break;
                    case NODE_FALSE: value_str = "false"; break;
                    case NODE_NULL: value_str = ""; break;
                    default: value_str = "";
                }
                char *row[] = {parent_id_str, index_str, value_str};
                write_csv_row(fp, row, 3);
            }
            fclose(fp);
        } else {
            // Array of objects
            char table_name[64];
            snprintf(table_name, sizeof(table_name), "%s_%s", parent_schema->name, key);
            char filename[256];
            snprintf(filename, sizeof(filename), "%s/%s.csv", output_dir, table_name);
            FILE *fp = fopen(filename, "w");
            if (!fp) {
                fprintf(stderr, "Error opening file %s\n", filename);
                exit(1);
            }
    
            // Determine scalar keys from first object
            char *scalar_keys[32];
            int num_scalar = 0;
            for (ast_node *pair = first; pair; pair = pair->data.object.next) {
                ast_node *value = pair->data.object.value;
                if (value->type == NODE_STRING || value->type == NODE_NUMBER ||
                    value->type == NODE_TRUE || value->type == NODE_FALSE || value->type == NODE_NULL) {
                    scalar_keys[num_scalar++] = pair->data.object.key;
                }
            }
            qsort(scalar_keys, num_scalar, sizeof(char*), strcmp_func);
    
            // Create header
            char **header = (char**)malloc(sizeof(char*) * (2 + num_scalar));
            char parent_id_col[64];
            snprintf(parent_id_col, sizeof(parent_id_col), "%s_id", parent_schema->name);
            header[0] = parent_id_col;
            header[1] = "seq";
            for (int i = 0; i < num_scalar; i++) {
                header[2 + i] = scalar_keys[i];
            }
            write_csv_row(fp, header, 2 + num_scalar);
    
            // Process each object
            int seq = 0;
            for (ast_node *elem = node; elem; elem = elem->data.array.next) {
                char **values = (char**)malloc(sizeof(char*) * (2 + num_scalar));
                char parent_id_str[16], seq_str[16];
                snprintf(parent_id_str, sizeof(parent_id_str), "%d", parent_id);
                snprintf(seq_str, sizeof(seq_str), "%d", seq++);
                values[0] = parent_id_str;
                values[1] = seq_str;
                for (int i = 0; i < num_scalar; i++) {
                    for (ast_node *pair = elem; pair; pair = pair->data.object.next) {
                        if (strcmp(pair->data.object.key, scalar_keys[i]) == 0) {
                            ast_node *value = pair->data.object.value;
                            switch (value->type) {
                                case NODE_STRING: values[2 + i] = value->data.string; break;
                                case NODE_NUMBER: values[2 + i] = value->data.number; break;
                                case NODE_TRUE: values[2 + i] = "true"; break;
                                case NODE_FALSE: values[2 + i] = "false"; break;
                                case NODE_NULL: values[2 + i] = ""; break;
                                default: values[2 + i] = "";
                            }
                            break;
                        }
                    }
                }
                write_csv_row(fp, values, 2 + num_scalar);
                free(values);
            }
            free(header);
            fclose(fp);
        }
    }
    
    void write_csv_row(FILE *fp, char **values, int num_values) {
        for (int i = 0; i < num_values; i++) {
            if (i > 0) fprintf(fp, ",");
            if (values[i][0] == '"') {
                fprintf(fp, "%s", values[i]);
            } else if (strlen(values[i]) == 0) {
                // Empty for null
            } else if (strcmp(values[i], "true") == 0 || strcmp(values[i], "false") == 0) {
                fprintf(fp, "%s", values[i]);
            } else if (strspn(values[i], "-0123456789.") == strlen(values[i])) {
                fprintf(fp, "%s", values[i]);
            } else {
                fprintf(fp, "\"");
                for (char *c = values[i]; *c; c++) {
                    if (*c == '"') fprintf(fp, "\"");
                    fprintf(fp, "%c", *c);
                }
                fprintf(fp, "\"");
            }
        }
        fprintf(fp, "\n");
    }